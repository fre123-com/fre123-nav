{"version":3,"sources":["../../../../src/checkers/stylelint/main.ts","../../../../../../node_modules/.pnpm/tsup@6.7.0_typescript@5.0.4/node_modules/tsup/assets/cjs_shims.js"],"sourcesContent":["import chokidar from 'chokidar'\nimport stylelint from 'stylelint'\nimport { translateOptions } from './options.js'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\nimport { parentPort } from 'worker_threads'\n\nimport { Checker } from '../../Checker.js'\nimport { FileDiagnosticManager } from '../../FileDiagnosticManager.js'\nimport {\n  composeCheckerSummary,\n  consoleLog,\n  diagnosticToRuntimeError,\n  diagnosticToTerminalLog,\n  filterLogLevel,\n  normalizeStylelintDiagnostic,\n  toClientPayload,\n} from '../../logger.js'\nimport { ACTION_TYPES, DiagnosticLevel } from '../../types.js'\n\nconst manager = new FileDiagnosticManager()\nlet createServeAndBuild\n\nimport type { CreateDiagnostic } from '../../types.js'\n\nconst __filename = fileURLToPath(import.meta.url)\n\nconst createDiagnostic: CreateDiagnostic<'stylelint'> = (pluginConfig) => {\n  let overlay = true\n  let terminal = true\n\n  return {\n    config: async ({ enableOverlay, enableTerminal }) => {\n      overlay = enableOverlay\n      terminal = enableTerminal\n    },\n    async configureServer({ root }) {\n      if (!pluginConfig.stylelint) return\n\n      const translatedOptions = await translateOptions(pluginConfig.stylelint.lintCommand)\n      const baseConfig = {\n        cwd: root,\n        ...translatedOptions,\n      } as const\n\n      const logLevel = (() => {\n        if (typeof pluginConfig.stylelint !== 'object') return undefined\n        const userLogLevel = pluginConfig.stylelint.dev?.logLevel\n        if (!userLogLevel) return undefined\n        const map = {\n          error: DiagnosticLevel.Error,\n          warning: DiagnosticLevel.Warning,\n        } as const\n\n        return userLogLevel.map((l) => map[l])\n      })()\n\n      const dispatchDiagnostics = () => {\n        const diagnostics = filterLogLevel(manager.getDiagnostics(), logLevel)\n\n        if (terminal) {\n          diagnostics.forEach((d) => {\n            consoleLog(diagnosticToTerminalLog(d, 'Stylelint'))\n          })\n          const errorCount = diagnostics.filter((d) => d.level === DiagnosticLevel.Error).length\n          const warningCount = diagnostics.filter((d) => d.level === DiagnosticLevel.Warning).length\n          consoleLog(composeCheckerSummary('Stylelint', errorCount, warningCount))\n        }\n\n        if (overlay) {\n          parentPort?.postMessage({\n            type: ACTION_TYPES.overlayError,\n            payload: toClientPayload(\n              'stylelint',\n              diagnostics.map((d) => diagnosticToRuntimeError(d))\n            ),\n          })\n        }\n      }\n\n      const handleFileChange = async (filePath: string, type: 'change' | 'unlink') => {\n        const absPath = path.resolve(root, filePath)\n\n        if (type === 'unlink') {\n          manager.updateByFileId(absPath, [])\n        } else if (type === 'change') {\n          const { results: diagnosticsOfChangedFile } = await stylelint.lint({\n            ...baseConfig,\n            files: filePath,\n          })\n          const newDiagnostics = diagnosticsOfChangedFile\n            .map((d) => normalizeStylelintDiagnostic(d))\n            .flat(1)\n          manager.updateByFileId(absPath, newDiagnostics)\n        }\n\n        dispatchDiagnostics()\n      }\n\n      // initial lint\n      const { results: diagnostics } = await stylelint.lint({\n        ...baseConfig,\n        ...pluginConfig.stylelint.dev?.overrideConfig,\n      })\n\n      manager.initWith(diagnostics.map((p) => normalizeStylelintDiagnostic(p)).flat(1))\n      dispatchDiagnostics()\n\n      // watch lint\n      const watcher = chokidar.watch([], {\n        cwd: root,\n        ignored: (path: string) => path.includes('node_modules'),\n      })\n      watcher.add(translatedOptions.files as string)\n      watcher.on('change', async (filePath) => {\n        handleFileChange(filePath, 'change')\n      })\n      watcher.on('unlink', async (filePath) => {\n        handleFileChange(filePath, 'unlink')\n      })\n    },\n  }\n}\n\nexport class StylelintChecker extends Checker<'stylelint'> {\n  public constructor() {\n    super({\n      name: 'stylelint',\n      absFilePath: __filename,\n      build: {\n        buildBin: (pluginConfig) => {\n          if (pluginConfig.stylelint) {\n            const { lintCommand } = pluginConfig.stylelint\n            return ['stylelint', lintCommand.split(' ').slice(1)]\n          }\n          return ['stylelint', ['']]\n        },\n      },\n      createDiagnostic,\n    })\n  }\n\n  public init() {\n    const _createServeAndBuild = super.initMainThread()\n    createServeAndBuild = _createServeAndBuild\n    super.initWorkerThread()\n  }\n}\n\nexport { createServeAndBuild }\nconst stylelintChecker = new StylelintChecker()\nstylelintChecker.prepare()\nstylelintChecker.init()\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n"],"mappings":"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","names":["__filename","_a","diagnostics","path","stylelint","chokidar"]}