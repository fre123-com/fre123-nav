{"version":3,"sources":["../../../../src/checkers/vueTsc/prepareVueTsc.ts","../../../../../../node_modules/.pnpm/tsup@6.7.0_typescript@5.0.4/node_modules/tsup/assets/cjs_shims.js"],"sourcesContent":["import fsExtra from 'fs-extra'\nimport { createRequire } from 'module'\nimport path, { dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport semver from 'semver'\nimport { writeFile, access, readFile, rm } from 'fs/promises'\n\nconst { copy, mkdir } = fsExtra\nconst _require = createRequire(import.meta.url)\n\n// isomorphic __dirname https://antfu.me/posts/isomorphic-dirname\nconst _filename = fileURLToPath(import.meta.url)\nconst _dirname = dirname(_filename)\nconst proxyApiPath = _require.resolve('vue-tsc/out/index')\n\nexport async function prepareVueTsc() {\n  // 1. copy typescript to folder\n  const targetTsDir = path.resolve(_dirname, 'typescript-vue-tsc')\n  const vueTscFlagFile = path.resolve(targetTsDir, 'vue-tsc-resolve-path')\n  const currTsVersion = _require('typescript/package.json').version\n\n  let shouldBuildFixture = true\n  try {\n    await access(targetTsDir)\n    const targetTsVersion = _require(path.resolve(targetTsDir, 'package.json')).version\n    // check fixture versions before re-use\n    await access(vueTscFlagFile)\n    const fixtureFlagContent = await readFile(vueTscFlagFile, 'utf8')\n    if (targetTsVersion === currTsVersion && fixtureFlagContent === proxyApiPath) {\n      shouldBuildFixture = false\n    }\n  } catch (e) {\n    // no matter what error, we should rebuild the fixture\n    shouldBuildFixture = true\n  }\n\n  if (shouldBuildFixture) {\n    await rm(targetTsDir, { force: true, recursive: true })\n    await mkdir(targetTsDir)\n    const sourceTsDir = path.resolve(_require.resolve('typescript'), '../..')\n    await copy(sourceTsDir, targetTsDir)\n    await writeFile(vueTscFlagFile, proxyApiPath)\n\n    // 2. sync modification of lib/tsc.js with vue-tsc\n    await overrideTscJs(\n      _require.resolve(path.resolve(targetTsDir, 'lib/typescript.js')),\n      currTsVersion\n    )\n  }\n\n  return { targetTsDir }\n}\n\nasync function overrideTscJs(tscJsPath: string, version: string) {\n  let tsc = await readFile(tscJsPath, 'utf8')\n  // #region copied from https://github.com/johnsoncodehk/volar/blob/54f7186485d79bc0e9b7ec59ecbc01d681ee5310/vue-language-tools/vue-tsc/bin/vue-tsc.js\n  // add *.vue files to allow extensions\n  tryReplace(/supportedTSExtensions = .*(?=;)/, (s: string) => s + '.concat([[\".vue\"]])')\n  tryReplace(/supportedJSExtensions = .*(?=;)/, (s: string) => s + '.concat([[\".vue\"]])')\n  tryReplace(/allSupportedExtensions = .*(?=;)/, (s: string) => s + '.concat([[\".vue\"]])')\n\n  // proxy createProgram apis\n  tryReplace(\n    /function createProgram\\(.+\\) {/,\n    (s: string) =>\n      s + ` return require(${JSON.stringify(proxyApiPath)}).createProgram(...arguments);`\n  )\n\n  // patches logic for checking root file extension in build program for incremental builds\n  if (semver.gt(version, '5.0.0')) {\n    tryReplace(\n      `for (const existingRoot of buildInfoVersionMap.roots) {`,\n      `for (const existingRoot of buildInfoVersionMap.roots\n\t\t\t\t.filter(file => !file.toLowerCase().includes('__vls_'))\n\t\t\t\t.map(file => file.replace(/\\.vue\\.(j|t)sx?$/i, '.vue'))\n\t\t\t) {`\n    )\n  }\n\n  function tryReplace(search: any, replace: any) {\n    const before = tsc\n    tsc = tsc.replace(search, replace)\n    const after = tsc\n    if (after === before) {\n      throw 'Search string not found: ' + JSON.stringify(search.toString())\n    }\n  }\n  // #endregion\n\n  await writeFile(tscJsPath, tsc)\n}\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;ACKA,IAAM,mBAAmB,MACvB,OAAO,aAAa,cAChB,IAAI,IAAI,UAAU,UAAU,EAAE,OAC7B,SAAS,iBAAiB,SAAS,cAAc,OAClD,IAAI,IAAI,WAAW,SAAS,OAAO,EAAE;AAEpC,IAAM,gBAAgC,iCAAiB;ADX9D,sBAAoB;AACpB,oBAA8B;AAC9B,kBAA8B;AAC9B,iBAA8B;AAC9B,oBAAmB;AACnB,sBAAgD;AAEhD,MAAM,EAAE,MAAM,MAAM,IAAI,gBAAAA;AACxB,MAAM,eAAW,6BAAc,aAAe;AAG9C,MAAM,gBAAY,0BAAc,aAAe;AAC/C,MAAM,eAAW,qBAAQ,SAAS;AAClC,MAAM,eAAe,SAAS,QAAQ,mBAAmB;AAEzD,eAAsB,gBAAgB;AAEpC,QAAM,cAAc,YAAAC,QAAK,QAAQ,UAAU,oBAAoB;AAC/D,QAAM,iBAAiB,YAAAA,QAAK,QAAQ,aAAa,sBAAsB;AACvE,QAAM,gBAAgB,SAAS,yBAAyB,EAAE;AAE1D,MAAI,qBAAqB;AACzB,MAAI;AACF,cAAM,wBAAO,WAAW;AACxB,UAAM,kBAAkB,SAAS,YAAAA,QAAK,QAAQ,aAAa,cAAc,CAAC,EAAE;AAE5E,cAAM,wBAAO,cAAc;AAC3B,UAAM,qBAAqB,UAAM,0BAAS,gBAAgB,MAAM;AAChE,QAAI,oBAAoB,iBAAiB,uBAAuB,cAAc;AAC5E,2BAAqB;AAAA,IACvB;AAAA,EACF,SAAS,GAAP;AAEA,yBAAqB;AAAA,EACvB;AAEA,MAAI,oBAAoB;AACtB,cAAM,oBAAG,aAAa,EAAE,OAAO,MAAM,WAAW,KAAK,CAAC;AACtD,UAAM,MAAM,WAAW;AACvB,UAAM,cAAc,YAAAA,QAAK,QAAQ,SAAS,QAAQ,YAAY,GAAG,OAAO;AACxE,UAAM,KAAK,aAAa,WAAW;AACnC,cAAM,2BAAU,gBAAgB,YAAY;AAG5C,UAAM;AAAA,MACJ,SAAS,QAAQ,YAAAA,QAAK,QAAQ,aAAa,mBAAmB,CAAC;AAAA,MAC/D;AAAA,IACF;AAAA,EACF;AAEA,SAAO,EAAE,YAAY;AACvB;AAEA,eAAe,cAAc,WAAmB,SAAiB;AAC/D,MAAI,MAAM,UAAM,0BAAS,WAAW,MAAM;AAG1C,aAAW,mCAAmC,CAAC,MAAc,IAAI,qBAAqB;AACtF,aAAW,mCAAmC,CAAC,MAAc,IAAI,qBAAqB;AACtF,aAAW,oCAAoC,CAAC,MAAc,IAAI,qBAAqB;AAGvF;AAAA,IACE;AAAA,IACA,CAAC,MACC,IAAI,mBAAmB,KAAK,UAAU,YAAY;AAAA,EACtD;AAGA,MAAI,cAAAC,QAAO,GAAG,SAAS,OAAO,GAAG;AAC/B;AAAA,MACE;AAAA,MACA;AAAA;AAAA;AAAA;AAAA,IAIF;AAAA,EACF;AAEA,WAAS,WAAW,QAAa,SAAc;AAC7C,UAAM,SAAS;AACf,UAAM,IAAI,QAAQ,QAAQ,OAAO;AACjC,UAAM,QAAQ;AACd,QAAI,UAAU,QAAQ;AACpB,YAAM,8BAA8B,KAAK,UAAU,OAAO,SAAS,CAAC;AAAA,IACtE;AAAA,EACF;AAGA,YAAM,2BAAU,WAAW,GAAG;AAChC;","names":["fsExtra","path","semver"]}